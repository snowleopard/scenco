#ifndef __BASE_H__
#define __BASE_H__

// libraries import
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <vector>
#include <math.h>
#include <sstream>
#include <map>
#include <limits>
#include <unistd.h>

// constant definition
#define stringLimit	80
#define eventsLimit	400
#define predicatesLimit	50

#define WELCOME_STRING "# Log file generated by SCENCO v0.1\n\n"

using namespace std;

// encodings available
enum encodingType
{
	single_literal,
	sequential,
	randomE,
	heuristic,
	exhaustive
};

typedef enum BitType
{
	ZERO,
	ONE,
	DONT_USE
} BitType;

// type definition
typedef enum {FALSE, TRUE} boolean;
typedef struct struct_tag{
	char type; 		/*v = vertex, e = edge*/
	char* source, *dest; 	/*if n
				  	source = vertex_name
			       	  if e
				  	source = from vertex
				  	dest = to vertex*/
	boolean condition; 	/*if TRUE, a condition exists*/
	char* cond; 		/*condition on vertex*/
	char* truth, *truth_cond;/*truth table*/
	char **fun, **fun_cond; /*boolean function*/
}CPOG_TYPE;

typedef struct Graph_st
{
	int **e;
	int *v;
	int *pred;
}GRAPH_TYPE;

typedef struct Encoding_st
{
	string constraint;

	bool trivial;
	int constant;

	int literal;
	bool inverted;
}Encoding;

//TEMPORARY FILES
#if defined(__linux) || defined(__APPLE__)
	char TRIVIAL_ENCODING_FILE[] = "/tmp/trivial.XXXXXX";
	char CONSTRAINTS_FILE[] = "/tmp/constraints.XXXXXX";
	char TMP_FILE[] = "/tmp/tmpfile.XXXXXX";
	char SCRIPT_PATH[] = "/tmp/synth.XXXXXX";
	char BOOL_PATH[] = "/tmp/bool_eq.XXXXXX";
	char SCENARIOS[] = "/tmp/scenarios.XXXXXX";
#else
	char TRIVIAL_ENCODING_FILE[L_tmpnam];
	char CONSTRAINTS_FILE[L_tmpnam];
	char TMP_FILE[L_tmpnam];
	char SCRIPT_PATH[L_tmpnam];
	char BOOL_PATH[L_tmpnam];
	char SCENARIOS[L_tmpnam];
#endif
	char LOG[] = "scenco.log";

// Alex's tool
char **manual_file = NULL;
char **manual_file_back = NULL;
int *custom_perm = NULL;
int *custom_perm_back = NULL;
boolean *DC_custom = NULL;
long long int tot_enc;
boolean DC = FALSE;
boolean first = TRUE;
long long int num_perm, all_perm;
int **opt_diff = NULL;
int counter = 0;
int **perm = NULL;
int **cons_perm = NULL;
int gates;
char **name_cond = NULL;
float area;
char *file_cons = NULL;
long long int *weights = NULL;
boolean SET;
boolean unfix = FALSE;
char **vertices = NULL;
char **diff = NULL;
BitType **opcodes = NULL;
int bits;
int min_bits;
int bits_saved;
int total;
int cpog_count = 0;
int *enc = NULL;
int *sol = NULL;
int len_sequence;
long long int minW;
long long int maxW;
CPOG_TYPE **cpog = NULL;
int nv=0;
int n_cond = 0;
int num_vert = 0;
char **decoder = NULL;

char **inputs = NULL;
int nInputs = 0;
char **outputs = NULL;
int nOutputs = 0;
char **equations = NULL;
int nEquations = 0;

boolean graphRead = FALSE;

boolean decode_flag = FALSE;
char *FOLDER_NAME = NULL;
boolean ABCFLAG = FALSE;
char *ABC_PATH = NULL;
char *LIBRARY_FILE = NULL;

// Andrey's tool
GRAPH_TYPE *g = NULL;
int n;
char s[stringLimit];

int V;
map<string, int> eventNames;
string *eventNames_str = NULL;
map<string, int> *eventPredicates = NULL;

vector<string> scenarioNames;
vector<string> scenarioOpcodes;

string** ev = NULL;
string** ee = NULL;
map<string, vector<pair<int, int> > > constraints;
map<string, vector<pair<int, int> > >::iterator cp, cq;

vector<Encoding> encodings;

vector<string> cgv;
vector<vector<int> > cge;
vector<int> literal;
vector<int> bestLiteral;

string** vConditions = NULL;
string** aConditions = NULL;

// alternative = false: alpha + beta * predicate
// alternative = true : alpha * (beta + predicate)
bool alternative = false;

#endif
